<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">  
<mapper namespace="com.neusoft.idmap.mapper.EnrollMapper">  
    <resultMap id="neuUserHierarchy" type="com.neusoft.idmap.bean.NeuUserHierarchyBean">  
        <result column="neuUserId" property="userId" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        <result column="addTime" property="addTime" javaType="java.sql.Timestamp" jdbcType="TIMESTAMP"/>
        <result column="id" property="neuUserHierarchyId" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        <result column="neuCmptId" property="neuCmptId" javaType="java.lang.Integer" jdbcType="INTEGER"/>
        <result column="parentNeuUserId" property="parentNeuUserId" javaType="java.lang.Integer" jdbcType="INTEGER"/>
    </resultMap>
    <resultMap id="gEnroll" type="com.neusoft.idmap.bean.GEnroll">
        <result column="userMapId" property="userId" javaType="int" jdbcType="INTEGER"/>  
        <result column="callPhone" property="phoneNum" javaType="String" jdbcType="VARCHAR"/>
        <result column="trueName" property="username"  javaType="String" jdbcType="VARCHAR"/>
    </resultMap>
    <resultMap id="gCmptBean" type="com.neusoft.idmap.bean.GCmptBean">
        <result column="cmptId" property="cmptId" javaType="int" jdbcType="INTEGER"/>  
        <result column="cmptName" property="cmptName" javaType="String" jdbcType="VARCHAR"/>
        <result column="deadline" property="deadline" javaType="java.util.Date" jdbcType="DATE"/>
    </resultMap>
    
  <!--  <insert id="saveNeuUserRelation">
		insert into neuUserHierarchy(neuUserId, parentNeuUserId, deleted,addTime)
		values(#{neuUserId}, #{parentNeuUserId} ,0 ,now())
	</insert> -->
	 <!--  插入修改用户的id角色信息-->
	<insert id="saveNeuUserRelation">
         <selectKey keyProperty="count" resultType="java.lang.Integer" order="BEFORE">
             select count(*) from common.neuUserHierarchy where deleted=0 and neuUserId = #{neuUserId} and parentNeuUserId=#{parentNeuUserId}
         </selectKey>
         <if test="count > 0">
             update common.neuUserHierarchy 
             set neuUserId = #{neuUserId},parentNeuUserId = #{parentNeuUserId}
             where neuUserId = #{neuUserId} and parentNeuUserId=#{parentNeuUserId}
         </if>
         <if test="count==0">
             insert into neuUserHierarchy(neuUserId, parentNeuUserId, deleted, addTime)
		     values(#{neuUserId}, #{parentNeuUserId} ,0 , now())
		 </if>
     </insert>
    
    <update id="deleteNeuUserRelation">
		update neuUserHierarchy set deleted=1
		where id=#{neuUserHierarchyId}
	</update>
	<!-- 删除赛事执行人员在该组委会下的权限-->
	<update id="deleteNeuUserRole">
	    update neuUserRole set deleted =1 
		where neuUserId = 
		(SELECT neuUserId from neuUserHierarchy where id =#{neuUserHierarchyId} )
		and  committeeNeuUserId = 
		(SELECT parentNeuUserId from neuUserHierarchy where id =#{neuUserHierarchyId} )
	    
	</update>
	 <!-- 根据报名的赛事名称获取报名整合系统的赛事id-->
    <select id="getNeuCmptIdsByGCmptName" resultType="java.lang.Integer">  
        <!-- select  ( select neuCmptId from common.neuCmpt a where a.gCmptId=b.cmptId) neuCmptId
         from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competition b
         where b.cmptName LIKE CONCAT('%',#{cmptName},'%')	limit 1 -->
         <!-- where b.cmptName=#{cmptName}	limit 1 -->
         select DISTINCT neuCmptId from common.neuCmpt a JOIN
         ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competition b 
        ON a.gCmptId=b.cmptId AND b.cmptName LIKE CONCAT('%',#{cmptName},'%')
    </select>
    
    <!-- 根据报名的用户手机号获取报名整合系统的用户id -->
    <select id="getNeuUserIdByGPhoneNum" resultType="java.lang.Integer">  
        select  (select neuUserId from common.neuUser a where a.gUserId=b.userId) neuUserId
        <!--  from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competitionusermap b -->
        from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.registerInfo b 
        where b.callPhone LIKE CONCAT('%',#{phoneNum},'%')	limit 1
        <!-- where b.callPhone=#{phoneNum}	limit 1 -->
    </select> 
     <!-- 根据报名的用户手机号获取报名整合系统的用户id -->
    <select id="getNeuUserIdsByGPhoneNum" resultType="java.lang.Integer">  
        <!-- select  (select neuUserId from common.neuUser a where a.gUserId=b.userId) neuUserId
         from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competitionusermap b
        from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.registerInfo b 
        where b.callPhone LIKE CONCAT('%',#{phoneNum},'%') -->
        <!-- where b.callPhone=#{phoneNum}	limit 1 -->
        select DISTINCT neuUserId from common.neuUser a JOIN 
        ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.registerInfo b 
        ON a.gUserId=b.userId AND b.callPhone LIKE CONCAT('%',#{phoneNum},'%')
    </select> 
    
    <!-- 根据整合赛事id获取报名的赛事-->
    <select id="getGCmptByNeuCmptIds" resultMap="gCmptBean">  
        select cmptId, cmptName from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competition a
        right join common.neuCmpt b on a.cmptId=b.gCmptId
        <where> 
        <foreach collection="neuCmptIds" item="neuCmptId" index="index" open="(" close=")" separator="or">
                           b.neuCmptId=#{neuCmptId}
         </foreach>
         </where>
    </select>
      <!-- 根据整合赛事id获取报名的赛事-->
    <select id="getGCmptByNeuCmptId" resultMap="gCmptBean">  
        select cmptId, cmptName,(select deadline from common.neuUserRole nr where nr.neuCmptId=#{neuCmptId} and nr.deleted=0 limit 1) deadline from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competition a
        right join common.neuCmpt b on a.cmptId=b.gCmptId where b.neuCmptId=#{neuCmptId} limit 1
    </select>
    
    <!-- 根据整合的用户id获取报名用户 -->
    <!-- <select id="getUserByGUserId" resultMap="gEnroll">  
        select userMapId, callPhone, userName
        from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competitionusermap a
        where a.userMapId=(select gUserId from common.neuUser 
                        where neuUserId=#{neuUserId})
        limit 0,1      
    </select> -->
      <select id="getUserByGUserId" resultMap="gEnroll">  
    	-- 优先取trueName，取不到取registerInfo_extend.name
        select userId, callPhone, ifnull(trueName,(select name from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.registerInfo_extend  re where re.userId=a.userId)) trueName,
        (select name from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.registerInfo_extend  re where re.userId=a.userId) userName 
        from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.registerInfo a
        where a.userId=(select gUserId from neuUser 
                        where neuUserId=#{neuUserId})
        limit 1      
    </select>
  
    
    <!-- 根据组委会和用户id信息查找用户信息 -->
      <select id="getNeuUserRelation" resultMap="neuUserHierarchy" >  
        select id, neuUserId, addTime
         <!-- (select neuCmptId from common.neuUserRole a where a.neuUserId=b.neuUserId) neuCmptId  -->
         from common.neuUserHierarchy b
         where b.neuUserId=#{neuUserId} and b.parentNeuUserId=#{parentNeuUserId}
         and deleted=0 
         limit 0, 1
			
    </select>
     <!-- 根据组委会和用户ids信息查找用户信息 -->
      <select id="getNeuUserRelations" resultMap="neuUserHierarchy" >  
        select id, neuUserId, addTime
         <!-- (select neuCmptId from common.neuUserRole a where a.neuUserId=b.neuUserId) neuCmptId  -->
         from common.neuUserHierarchy b
         where 1=1
         <if test="neuUserIds!=null and neuUserIds.size()>0"> 
              and
            <foreach collection="neuUserIds" item="neuUserId" index="index" open="(" close=")" separator="or">
                           b.neuUserId=#{neuUserId}
            </foreach> 
        </if>
         
                        and b.parentNeuUserId=#{parentNeuUserId}
          and deleted=0 
         <!-- limit 0, 1 -->
			
    </select>
     <!-- 根据组委会id信息查找用户信息列表 -->
      <select id="getNeuUserRelationList" resultMap="neuUserHierarchy" >  
        select id, neuUserId, addTime
         <!-- (select neuCmptId from common.neuUserRole a where a.neuUserId=b.neuUserId) neuCmptId  -->
         from common.neuUserHierarchy b
         where  b.parentNeuUserId=#{parentNeuUserId}
         and deleted=0 
    </select>
    
    <select id="getNeuUserHierarchys" resultMap="neuUserHierarchy" >  
        select * from neuUserHierarchy where neuUserId=#{neuUserId} and deleted=0 order by id desc
    </select>
    
     <!-- <select id="getNeuUserRelationList" resultMap="neuUserHierarchy">  
        select id,neuUserId,addTime,
        (select count(distinct neuCmptId) from neuUserRole 
         where neuUserRole.neuUserId=neuUserHierarchy.neuUserId) execCmptCounts,
         
        (select userName from ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competitionusermap
         where  userMapId in(select gUserId from neuUser where neuUser.neuUserId=neuUserHierarchy.neuUserId)
         ) userName ,
    
        (select group_concat(cmptName SEPARATOR '\n') ${@com.neusoft.utils.Const@GEEXEK_ENROLL_DB}.competition
         where cmptId in (select distinct gCmptId from neuCmpt where neuCmpt.neuCmptId=neuUserHierarchy.neuCmptId)
         ) cmptNames
         from neuUserHierarchy 
         <where>
         <if test="keyword!=null"> 
            password= #{password}, 
        </if>
         </where>
         where neuUserHierarchy.parentNeuUserId=#{neuUserId}		
    </select> -->
    
    
    
    
 
	
</mapper>






























